generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  displayName   String?
  accounts      Account[]
  comments      Comment[]
  sessions      Session[]
  tickets       Ticket[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id           String    @id @default(uuid())
  title        String
  description  String
  status       String    @default("Queued")
  imageUrl     String?
  upvotesCount Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  authorId     String
  hidden       Boolean   @default(false)
  comments     Comment[]
  author       User      @relation(fields: [authorId], references: [id])
  votes        Vote[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  ticketId  String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Vote {
  userId    String
  ticketId  String
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, ticketId])
}

model Settings {
  id              Int     @id @default(1)
  primaryColor    String?
  secondaryColor  String?
  logoUrl         String?
  logoRedirectUrl String?
}

model SystemAdmin {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @unique
  name       String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email], map: "idx_system_admins_email")
  @@map("system_admins")
}
